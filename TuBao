package devidedandconquer;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;


	class DrawPanel extends JPanel {
		public static final int WIDTH = 640;
		public static final int HEIGHT = 480;
		public static final int BORDER = 100;
		ArrayList px = new ArrayList();
		ArrayList py = new ArrayList();
		TuBao tuBao = null;
		//QuickTuBao qtuBao = null;
		int n;
		public DrawPanel() {
			setPreferredSize(new Dimension(WIDTH, HEIGHT));
			setBorder(new LineBorder(Color.GREEN));
			n = 50;
		}
		public void setN(int n) { this.n = n; }

		public void randPoints() {
			px.clear();
			py.clear();
			Random rd = new Random();
			for (int i = 0; i < n; i++) {		
				px.add(rd.nextInt(WIDTH-BORDER*2)+BORDER);
				py.add(rd.nextInt(HEIGHT-BORDER*2)+BORDER);
			}
			System.out.println("点的个数:"+n);
		}
		public void setTuBao(TuBao tuBao) {
			this.tuBao = tuBao;
			tuBao.setPointList(px,py);
		}
		public void paintComponent(Graphics g) {
			super.paintComponent(g);	
			Color c = g.getColor();
			g.setColor(Color.blue);
	
			for (int i=0;i<px.size();i++) {
				g.fillOval(Integer.valueOf(String.valueOf(px.get(i))).intValue(),Integer.valueOf(String.valueOf(py.get(i))).intValue(),3,3);
			    g.drawString("("+Integer.valueOf(String.valueOf(px.get(i))).intValue()+","+(HEIGHT-Integer.valueOf(String.valueOf(py.get(i))).intValue())+")", Integer.valueOf(String.valueOf(px.get(i))).intValue(), Integer.valueOf(String.valueOf(py.get(i))).intValue());
			}
			g.setColor(c);
			if (tuBao == null) return;
			if(tuBao != null){
				long runt1=System.currentTimeMillis();
				ArrayList tu=tuBao.eval();
				long runt2=System.currentTimeMillis();
				System.out.println("Time:"+(runt2-runt1)+"ms");
				for (int i=0;i<tu.size();i++) {
					Line line=(Line) tu.get(i);
					line.draw(g);
				}
				tuBao = null;
			}	
		}
	}
	/*
	*	主窗体
	*/
	public class DevidedandConquer extends JFrame {
		DrawPanel drawPanel;
		JSlider sd;
		JLabel lb;
//		TuBao baoLiTuBao = new BaoLiTuBao();
//		TuBao quickTuBao = new QuickTuBao();
		public DevidedandConquer() {
			setTitle("凸包求解算法设计与实现");
			
			JPanel menu = new JPanel();
			menu.setLayout(new FlowLayout(FlowLayout.LEFT));
			sd = new JSlider(JSlider.HORIZONTAL, 0, 1000, 1000);
			sd.setMajorTickSpacing(20);
			sd.setMinorTickSpacing(10);
			sd.setPaintTicks(true);
			lb = new JLabel("1000");
			JButton btnRand = new JButton("凸包点");
			JButton btnBaoLi = new JButton("枚举法");
			JButton btnQuick = new JButton("Graham-Scan");
			JButton btnFenzhi = new JButton("分治法");
			menu.add(sd);
			menu.add(lb);
			menu.add(btnRand);
			menu.add(btnBaoLi);
			menu.add(btnQuick);
			menu.add(btnFenzhi);
			final BaoLiTuBao baoLiTuBao = new BaoLiTuBao();
			final QuickTuBao quickTuBao = new QuickTuBao();
			final DcTuBao dcTuBao = new DcTuBao();
			drawPanel = new DrawPanel();

			add(BorderLayout.NORTH, menu);
			add(BorderLayout.CENTER, drawPanel);
			
			pack();
			setResizable(false);
			
			sd.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					lb.setText(String.valueOf(sd.getValue()));
					drawPanel.setN(sd.getValue());
				}
			});
			
			btnRand.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					drawPanel.randPoints();
					repaint();
				}
			});
			
			btnBaoLi.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.out.println("枚举法");
					drawPanel.setTuBao(baoLiTuBao);
					repaint();
				}
			});
			
			btnQuick.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.out.println("Graham-Scan");
					drawPanel.setTuBao(quickTuBao);
					repaint();
					
				}
			});
			
			btnFenzhi.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.out.println("分治法");
					drawPanel.setTuBao(dcTuBao);
					repaint();
					
				}
			});
			setVisible(true);
		}
	 public static void main(String[] args){
	 
		 DevidedandConquer dac=new DevidedandConquer();
	    
	 }
	 
}
	class Line {
		int p1x;
		int p1y;
		int p2x;
		int p2y;
		Line(int p1x,int p1y,int p2x,int p2y) {
			this.p1x = p1x;
			this.p2x = p2x;
			this.p1y=p1y;
			this.p2y=p2y;
		}
		void draw(Graphics g) {
			g.drawLine(p1x, p1y, p2x, p2y);
		}
		public String toString() {
			return "(" + p1x + ", " + p1y + ") -> (" + p2x + ", " + p2y + ")"; 
		}
	}
	interface TuBao {
		void setPointList(ArrayList px,ArrayList py);
		ArrayList eval();
	}
	class BaoLiTuBao implements TuBao{

		ArrayList tpx = new ArrayList();
		ArrayList tpy=new ArrayList();
		ArrayList lines = new ArrayList();
		
		public void setPointList(ArrayList px,ArrayList py) {
			tpx.clear();
			tpy.clear();
			for(int i=0;i<px.size();i++){
				tpx.add(px.get(i));
				tpy.add(py.get(i));
			}
		}
		
		public ArrayList eval() {
			lines.clear();
			if (tpx == null) { return lines; }
			int n = tpx.size();
			int a, b, c, cc, l, r;
			for (int i = 0; i < n; i++) {
				for (int j = i+1; j < n; j++) {
					int x1=Integer.valueOf(String.valueOf(tpx.get(i))).intValue();
					int x2=Integer.valueOf(String.valueOf(tpx.get(j))).intValue();
					int y1=Integer.valueOf(String.valueOf(tpy.get(i))).intValue();
					int y2=Integer.valueOf(String.valueOf(tpy.get(j))).intValue();
					a = y2 - y1;
					b = x1 - x2;
					c = x1 * y2 -
						y1* x2;
					l = r = 0;
					
					int k;
					for (k = 0; k < n; k++) {
						cc = a * Integer.valueOf(String.valueOf(tpx.get(k))).intValue() + b *Integer.valueOf(String.valueOf(tpy.get(k))).intValue();
						if (cc > c) l++;
						else if (cc < c) r++;
						if (l * r != 0) break;
					}
					
					if (k == n) {	
						int x3=Integer.valueOf(String.valueOf(tpx.get(i))).intValue();
						int x4=Integer.valueOf(String.valueOf(tpx.get(j))).intValue();
						int y3=Integer.valueOf(String.valueOf(tpy.get(i))).intValue();
						int y4=Integer.valueOf(String.valueOf(tpy.get(j))).intValue();
						lines.add(new Line(x3,y3,x4,y4));
					}
				}
			}
			return lines;
		}
	}
	class QuickTuBao implements TuBao{
		ArrayList qtpx=new ArrayList();
		ArrayList qtpy=new ArrayList();
		ArrayList qlines = new ArrayList();
		int height=480;
		public void setPointList(ArrayList px,ArrayList py) {
			ArrayList tpx=new ArrayList();
			ArrayList tpy=new ArrayList();
			ArrayList tanset=new ArrayList();
			qtpx.clear();
			qtpy.clear();
			int miny=0;
			int pos=0;
			for(int i=0;i<px.size();i++){
				tpx.add(px.get(i));
				tpy.add(py.get(i));
				if(Integer.valueOf(String.valueOf(py.get(i))).intValue()>miny){
					miny=Integer.valueOf(String.valueOf(py.get(i))).intValue();
				    pos=i;
				}
			}
//			System.out.println("Ymin:"+" x:"+tpx.get(pos)+" y:"+(height-Integer.valueOf(String.valueOf(tpy.get(pos))).intValue()));
			int x=Integer.valueOf(String.valueOf(tpx.get(pos))).intValue();
			int y=Integer.valueOf(String.valueOf(tpy.get(pos))).intValue();
			qtpx.add(x);
			qtpy.add(height-y);
			tpx.remove(pos);
			tpy.remove(pos);
//			tanset.add("0");
			while(tpx.size()>0){
				double tan=0;
				double select=999;
				int loc=0;
				for(int i=0;i<tpx.size();i++){
					int xd=Integer.valueOf(String.valueOf(tpx.get(i))).intValue()-x;
					int yd=y-Integer.valueOf(String.valueOf(tpy.get(i))).intValue();					
						tan=180*Math.atan2(yd,xd)/Math.PI;
					if(tan<select){
//						System.out.println(yd+" "+xd+" "+tan);
						select=tan;
						loc=i;
					}
					
				}
				tanset.add(select);
				qtpx.add(tpx.get(loc));
				qtpy.add(height-Integer.valueOf(String.valueOf(tpy.get(loc))).intValue());
				tpx.remove(loc);
				tpy.remove(loc);
				
			}
//			System.out.println(px);
//			System.out.println("排序后x:"+qtpx);
//			System.out.println(py);
//			System.out.println("排序后x:"+qtpy);//qty存的是正常左下角为原点的y值
		}

		//求凸包，结果存入lines中
		public ArrayList eval() {
//			System.out.println("GS eval");
			qlines.clear();
			if (qtpx == null) { return qlines; }
			ArrayList temp=new ArrayList();
			temp.add(0);
			temp.add(1);
			for(int i=2;i<qtpx.size();i++){
//				System.out.println(i);
				double angle1=0;
				double angle2=0;
				int size=temp.size()-1;
				int x3=(int) qtpx.get(i);//新加入点
				int y3=(int) qtpy.get(i);
				if(size==0){
					temp.add(i);
//					System.out.println("Add:"+x3+" "+y3);
					continue;
				}
				int x1=(int) qtpx.get((int) temp.get(size-1));//栈顶第二个点
				int x2=(int) qtpx.get((int) temp.get(size));//栈顶第一个点				
				int y1=(int) qtpy.get((int) temp.get(size-1));
				int y2=(int) qtpy.get((int) temp.get(size));
				int disx1=x2-x1;
				int disx2=x3-x2;
				int disy1=y2-y1;
				int disy2=y3-y2;
				angle1=180*Math.atan2(disy1,disx1)/Math.PI;
				
				angle2=180*Math.atan2(disy2,disx2)/Math.PI;
				if(angle1<0){
					angle1=360+angle1;
				}
				if(angle2<0){
					angle2=360+angle2;
				}
				if(angle2>angle1||angle2==angle1){
					temp.add(i);
//					System.out.println("Add:"+x3+" "+y3+" "+angle1+","+angle2);
					continue;
				}
				if(angle2<angle1){
					temp.remove(size);
					i--;
//					System.out.println("Pop:"+x2+" "+y2+" "+angle1+","+angle2);
					continue;
				}
            }
//			System.out.println(qtpx);
//			System.out.println(qtpy);
			for(int j=0;j<temp.size()-1;j++){
//				System.out.println(qtpx.get((int) temp.get(j))+","+qtpy.get((int) temp.get(j)));
				qlines.add(new Line((int)qtpx.get((int) temp.get(j)),height-(int)qtpy.get((int) temp.get(j)),(int)qtpx.get((int) temp.get(j+1)),height-(int)qtpy.get((int) temp.get(j+1))));
			}
			qlines.add(new Line((int)qtpx.get((int) temp.get(temp.size()-1)),height-(int)qtpy.get((int) temp.get(temp.size()-1)),(int)qtpx.get((int) temp.get(0)),height-(int)qtpy.get((int) temp.get(0))));
			return qlines;
		}	
	}
	class DcTuBao implements TuBao {

		ArrayList lines = new ArrayList();
		ArrayList pts=new ArrayList();
		public void setPointList(ArrayList px,ArrayList py) {
			pts.clear();
			for(int i=0;i<px.size();i++){
				pts.add(new Point((int)px.get(i),(int)py.get(i)));
			}
		}
		//求凸包，结果存入lines中
		public ArrayList eval() {
			lines.clear();
			if (pts == null || pts.isEmpty()) { return lines; }
			
			ArrayList ptsLeft = new ArrayList();
			ArrayList ptsRight = new ArrayList();
			
			//按x坐标对pts排序
			ArrayList tpx=new ArrayList();
			while(pts.size()>0){
				int select=999;
				int loc=0;
				for(int i=0;i<pts.size();i++){
					Point p=(Point) pts.get(i);
					if(p.x<select){
						loc=i;
						select=p.x;
					}
				}
			tpx.add(pts.get(loc));
			pts.remove(loc);	
			}
			pts=tpx;
			Point p1 = (Point) pts.get(0);	//最左边的点
			Point p2 = (Point) pts.get(pts.size()-1);	//最右边的点
			Point p3 = null;
			int area = 0;
//			System.out.println("排序后的点对:");
			for(int i=0;i<pts.size();i++){
				Point p=(Point) pts.get(i);
//				System.out.println(p.x+","+(480-p.y));
			}
			
			for (int i = 1; i < pts.size(); i++) {
				p3 = (Point) pts.get(i);
				area = getArea(p1, p2, p3);
				if (area > 0) {		
					ptsLeft.add(p3);
				} else if (area < 0) {
					ptsRight.add(p3);
				}
			}
//			System.out.println("LEFT:");
			for(int i=0;i<ptsLeft.size();i++){
				Point p=(Point) ptsLeft.get(i);
//				System.out.println(p.x+","+(480-p.y));
			}
//			System.out.println("RIGHT:");
			for(int i=0;i<ptsRight.size();i++){
				Point p=(Point) ptsRight.get(i);
//				System.out.println(p.x+","+(480-p.y));
			}
			d(p1, p2, ptsLeft);
			d(p2, p1, ptsRight);
			return lines;
		}

		private void d(Point p1, Point p2, ArrayList s) {
			//s集合为空
			if (s.isEmpty()) {
				int p1x=p1.x;
				int p1y=p1.y;
				int p2x=p2.x;
				int p2y=p2.y;
				lines.add(new Line(p1x,p1y, p2x,p2y));
				return;
			}
			//s集合不为空，寻找Pmax
			int area = 0;
			int maxArea = 0;
			Point pMax = null;
			for (int i = 0; i < s.size(); i++) {
				area = getArea(p1, p2, (Point)s.get(i));
				if (area > maxArea) {
					pMax = (Point) s.get(i);
					maxArea = area;
				}
			}
			//找出位于(p1, pMax)直线左边的点集s1
			//找出位于(pMax, p2)直线左边的点集s2
			ArrayList s1 = new ArrayList();
			ArrayList s2 = new ArrayList();
			Point p3 = null;
			for (int i = 0; i < s.size(); i++) {
				p3 = (Point) s.get(i);
				if (getArea(p1, pMax, p3) > 0) {
					s1.add(p3);
				} else if (getArea(pMax, p2, p3) > 0) {
					s2.add(p3);
				} 
			}
			//递归
			d(p1, pMax, s1);
			d(pMax, p2, s2);	
		}
		// 三角形的面积等于返回值绝对值的二分之一
		// 当且仅当点p3位于直线(p1, p2)左侧时，表达式的符号为正
		private int getArea(Point p1, Point p2, Point p3) {
			return p1.x * p2.y + p3.x * p1.y + p2.x * p3.y -
					p3.x * p2.y - p2.x * p1.y - p1.x * p3.y;
		}
	}

